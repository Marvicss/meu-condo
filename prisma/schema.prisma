// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserType {
  ADMIN
  USER
}

model User {
  id          String   @id @default(uuid())
  fullName    String
  username    String   @unique
  email       String   @unique
  password    String
  phoneNumber String?  @unique
  cpf         String   @unique
  userType    UserType
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Condominium {
  id          String      @id @default(uuid())
  name        String
  cnpj        String      @unique
  address     String
  email       String      @unique
  phoneNumber String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  PartyRoom   PartyRoom[]

  Parking        Parking[]
  Accountability Accountability[]
  Apartment       Apartment[]
}

model PartyRoom {
  id            String      @id @default(uuid())
  name          String
  description   String?
  capacity      Int
  available     Boolean     @default(true)
  condominiumId String
  condominium   Condominium @relation(fields: [condominiumId], references: [id])
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Parking {
  id            String      @id @default(uuid())
  name          String
  description   String?
  capacity      Int
  available     Boolean     @default(true)
  condominiumId String
  condominium   Condominium @relation(fields: [condominiumId], references: [id])
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Accountability {
  id            String             @id @default(uuid())
  title         String
  description   String?
  amount        Decimal
  type          AccountabilityType
  date          DateTime
  condominiumId String
  condominium   Condominium        @relation(fields: [condominiumId], references: [id])
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
}

model Apartment {
  id             String      @id @default(uuid())
  condominiumId  String
  floor          Int
  number         Int
  createdAt      DateTime    @default(now())

  // Relacionamento
  condominium    Condominium @relation(fields: [condominiumId], references: [id])

  @@map("apartments") // Opcional: nome da tabela no banco, se quiser customizar
}

enum AccountabilityType {
  INCOME
  EXPENSE
}
